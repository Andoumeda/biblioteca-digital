openapi: 3.0.1
info:
  title: Biblioteca Digital API
  version: v1.0
  description: API Documentation for Biblioteca Digital - Módulo de Libros

servers:
  - url: http://localhost:8083/api
    description: Módulo de Libros

tags:
  - name: Books
    description: Gestión de libros
  - name: Authors
    description: Gestión de autores
  - name: Ratings
    description: Gestión de valoraciones

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    BaseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Identificador único del registro
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación del registro
        updatedAt:
          type: string
          format: date-time
          description: Fecha de última actualización del registro
        isDeleted:
          type: boolean
          description: Indica si el registro fue eliminado lógicamente (soft delete)

    RoleDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          description: Nombre del rol (e.g., ADMIN, USER)
        description:
          type: string

    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        username:
          type: string
          description: Nombre de usuario único
        email:
          type: string
          format: email
          description: Correo electrónico del usuario
        role:
          $ref: '#/components/schemas/RoleDTO'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserRegistrationRequestDTO:
      type: object
      required:
        - username
        - email
        - password
        - roleId
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 100
        password:
          type: string
          format: password
          minLength: 8
        roleId:
          type: integer
          format: int32

    UserLoginRequestDTO:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          maxLength: 100
        password:
          type: string
          format: password

    AuthResponseDTO:
      type: object
      properties:
        token:
          type: string
          description: JWT token
        user:
          $ref: '#/components/schemas/UserDTO'

    UserProfileRequestDTO:
      type: object
      required:
        - userId
        - displayName
      properties:
        userId:
          type: integer
          format: int32
          description: ID del usuario asociado al perfil
        displayName:
          type: string
          maxLength: 100
          description: Nombre visible del usuario en la plataforma
        bio:
          type: string
          description: Biografía o información adicional del usuario
        profilePicture:
          type: string
          maxLength: 255
          description: URL de la foto de perfil del usuario

    UserProfileResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - $ref: '#/components/schemas/UserProfileRequestDTO'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/UserDTO'

    AnnouncementRequestDTO:
      type: object
      required:
        - title
        - type
        - targetAudience
      properties:
        title:
          type: string
          maxLength: 255
          description: Título del anuncio
        message:
          type: string
          description: Mensaje o cuerpo del anuncio
        type:
          type: string
          enum:
            - alert
            - info
            - warning
            - promo
          description: Tipo de anuncio
        targetAudience:
          type: string
          enum:
            - all
            - new_users
            - admins
          description: Audiencia objetivo del anuncio

    AnnouncementResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - $ref: '#/components/schemas/AnnouncementRequestDTO'
        - type: object

    FavoriteRequestDTO:
      type: object
      required:
        - userProfileId
        - publicationId
      properties:
        userProfileId:
          type: integer
          format: int32
          description: ID del perfil de usuario
        publicationId:
          type: integer
          format: int32
          description: ID de la publicación favorita

    FavoriteResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - type: object
          properties:
            userProfile:
              $ref: '#/components/schemas/UserProfileResponseDTO'
            publication:
              $ref: '#/components/schemas/PublicationResponseDTO'

    PublicationRequestDTO:
      type: object
      required:
        - userProfileId
        - title
        - state
      properties:
        userProfileId:
          type: integer
          format: int32
          description: ID del perfil de usuario que crea la publicación
        title:
          type: string
          description: Título de la publicación
        description:
          type: string
          description: Descripción de la publicación
        state:
          type: string
          enum:
            - pending
            - approved
            - rejected
          description: Estado de la publicación
        categoryIds:
          type: array
          items:
            type: integer
            format: int32
          description: IDs de las categorías asociadas

    PublicationResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - $ref: '#/components/schemas/PublicationRequestDTO'
        - type: object
          properties:
            userProfile:
              $ref: '#/components/schemas/UserProfileResponseDTO'
            categories:
              type: array
              items:
                $ref: '#/components/schemas/CategoryResponseDTO'
            books:
              type: array
              items:
                $ref: '#/components/schemas/BookResponseDTO'

    CategoryRequestDTO:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
          description: Nombre de la categoría

    CategoryResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - $ref: '#/components/schemas/CategoryRequestDTO'
        - type: object

    BookRequestDTO:
      type: object
      required:
        - publicationId
        - title
        - bookUrl
        - numPages
        - fileSize
        - authorIds
      properties:
        publicationId:
          type: integer
          format: int32
          description: ID de la publicación asociada
        title:
          type: string
          maxLength: 255
          description: Título del libro
        description:
          type: string
          description: Descripción del libro
        bookUrl:
          type: string
          maxLength: 255
          description: URL del archivo del libro
        coverImg:
          type: string
          maxLength: 255
          description: URL de la imagen de portada
        numPages:
          type: integer
          format: int32
          minimum: 1
          description: Número de páginas del libro
        fileSize:
          type: integer
          format: int32
          minimum: 1
          description: Tamaño del archivo en bytes
        authorIds:
          type: array
          items:
            type: integer
            format: int32
          description: IDs de los autores del libro

    BookResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - $ref: '#/components/schemas/BookRequestDTO'
        - type: object
          properties:
            authors:
              type: array
              items:
                $ref: '#/components/schemas/AuthorResponseDTO'
            ratingAverage:
              type: number
              format: float
              description: Puntuación promedio del libro
            ratingsCount:
              type: integer
              format: int32
              description: Número total de valoraciones del libro

    AuthorRequestDTO:
      type: object
      required:
        - fullName
        - bio
      properties:
        fullName:
          type: string
          maxLength: 150
          description: Nombre completo del autor
        bio:
          type: string
          description: Biografía del autor
        birthDate:
          type: string
          format: date
          description: Fecha de nacimiento del autor
        nationality:
          type: string
          maxLength: 100
          description: Nacionalidad del autor

    AuthorResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - $ref: '#/components/schemas/AuthorRequestDTO'
        - type: object

    RatingRequestDTO:
      type: object
      required:
        - userProfileId
        - bookId
        - valoration
      properties:
        userProfileId:
          type: integer
          format: int32
          description: ID del perfil de usuario que realiza la valoración
        bookId:
          type: integer
          format: int32
          description: ID del libro que se está valorando
        valoration:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
          description: Puntuación otorgada (1-5)
        comment:
          type: string
          description: Comentario adicional sobre el libro

    RatingResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - $ref: '#/components/schemas/RatingRequestDTO'
        - type: object
          properties:
            userProfile:
              $ref: '#/components/schemas/UserProfileResponseDTO'
            book:
              $ref: '#/components/schemas/BookResponseDTO'

    PaginatedResponseDTO:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
        next:
          type: boolean
        prev:
          type: boolean

    ErrorResponseDTO:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        path:
          type: string

  responses:
    UnauthorizedError:
      description: No autorizado - Token inválido o no proporcionado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'

    ForbiddenError:
      description: Prohibido - No tiene permisos para realizar esta acción
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'

    NotFoundError:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'

    BadRequestError:
      description: Petición inválida
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'

paths:
  # ==========================================
  # BOOK ENDPOINTS (Puerto 8083)
  # ==========================================
  /books:
    get:
      tags:
        - Books
      summary: Obtener todos los libros
      description: Lista paginada de todos los libros disponibles
      operationId: getAllBooks
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Lista de libros
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
              example:
                data:
                  - id: 1
                    title: "El Quijote"
                    description: "Novela de caballería escrita por Miguel de Cervantes"
                    bookUrl: "https://example.com/libros/el_quijote.pdf"
                    numPages: 500
                    fileSize: 1500000
                    authorIds: [1, 2]
                    createdAt: "2024-10-06T10:30:00Z"
                    updatedAt: "2024-10-06T10:30:00Z"
                  - id: 2
                    title: "1984"
                    description: "Novela distópica de George Orwell"
                    bookUrl: "https://example.com/libros/1984.pdf"
                    numPages: 328
                    fileSize: 800000
                    authorIds: [3]
                    createdAt: "2024-10-05T09:15:00Z"
                    updatedAt: "2024-10-05T09:15:00Z"
                page: 0
                size: 20
                total: 2
                currentPage: 0
                totalPages: 1
                next: false
                prev: false

    post:
      tags:
        - Books
      summary: Crear libro
      description: Agrega un nuevo libro a una publicación existente
      operationId: createBook
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequestDTO'
            example:
              publicationId: 1
              title: "El Quijote"
              description: "Novela de caballería escrita por Miguel de Cervantes"
              bookUrl: "https://example.com/libros/el_quijote.pdf"
              numPages: 500
              fileSize: 1500000
              authorIds: [1, 2]
      responses:
        '201':
          description: Libro creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
              example:
                id: 3
                publicationId: 1
                title: "El Quijote"
                description: "Novela de caballería escrita por Miguel de Cervantes"
                bookUrl: "https://example.com/libros/el_quijote.pdf"
                numPages: 500
                fileSize: 1500000
                authorIds: [1, 2]
                createdAt: "2024-10-06T10:30:00Z"
                updatedAt: "2024-10-06T10:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /books/{id}:
    get:
      tags:
        - Books
      summary: Obtener libro por ID
      operationId: getBookById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '200':
          description: Libro encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
              example:
                id: 1
                title: "El Quijote"
                description: "Novela de caballería escrita por Miguel de Cervantes"
                bookUrl: "https://example.com/libros/el_quijote.pdf"
                numPages: 500
                fileSize: 1500000
                authorIds: [1, 2]
                createdAt: "2024-10-06T10:30:00Z"
                updatedAt: "2024-10-06T10:30:00Z"
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Books
      summary: Actualizar libro
      operationId: updateBook
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequestDTO'
            example:
              publicationId: 1
              title: "El Quijote - Edición Actualizada"
              description: "Novela de caballería escrita por Miguel de Cervantes. Edición conmemorativa."
              bookUrl: "https://example.com/libros/el_quijote_actualizado.pdf"
              numPages: 520
              fileSize: 1550000
              authorIds: [1, 2]
      responses:
        '200':
          description: Libro actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
              example:
                id: 1
                title: "El Quijote - Edición Actualizada"
                description: "Novela de caballería escrita por Miguel de Cervantes. Edición conmemorativa."
                bookUrl: "https://example.com/libros/el_quijote_actualizado.pdf"
                numPages: 520
                fileSize: 1550000
                authorIds: [1, 2]
                createdAt: "2024-10-06T10:30:00Z"
                updatedAt: "2024-10-06T10:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Books
      summary: Eliminar libro (soft delete)
      description: Marca el libro como eliminado sin borrarlo físicamente
      operationId: deleteBook
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '204':
          description: Libro marcado como eliminado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ==========================================
  # AUTHOR ENDPOINTS (Puerto 8083)
  # ==========================================
  /authors:
    get:
      tags:
        - Authors
      summary: Obtener todos los autores
      description: Lista paginada de autores registrados
      operationId: getAllAuthors
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Lista de autores
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
              example:
                data:
                  - id: 1
                    fullName: "Miguel de Cervantes"
                    bio: "Escritor español, autor de 'Don Quijote'"
                    birthDate: "1547-09-29"
                    nationality: "Española"
                    createdAt: "2024-10-06T10:30:00Z"
                    updatedAt: "2024-10-06T10:30:00Z"
                  - id: 2
                    fullName: "George Orwell"
                    bio: "Escritor británico, autor de '1984' y 'Rebelión en la granja'"
                    birthDate: "1903-06-25"
                    nationality: "Británica"
                    createdAt: "2024-10-05T09:15:00Z"
                    updatedAt: "2024-10-05T09:15:00Z"
                page: 0
                size: 20
                total: 2
                currentPage: 0
                totalPages: 1
                next: false
                prev: false

    post:
      tags:
        - Authors
      summary: Crear autor
      description: Registra un nuevo autor en el sistema
      operationId: createAuthor
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequestDTO'
            example:
              fullName: "Gabriel García Márquez"
              bio: "Escritor colombiano, autor de 'Cien años de soledad'"
              birthDate: "1927-03-06"
              nationality: "Colombiana"
      responses:
        '201':
          description: Autor creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponseDTO'
              example:
                id: 3
                fullName: "Gabriel García Márquez"
                bio: "Escritor colombiano, autor de 'Cien años de soledad'"
                birthDate: "1927-03-06"
                nationality: "Colombiana"
                createdAt: "2024-10-06T10:30:00Z"
                updatedAt: "2024-10-06T10:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /authors/{id}:
    get:
      tags:
        - Authors
      summary: Obtener autor por ID
      operationId: getAuthorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '200':
          description: Autor encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponseDTO'
              example:
                id: 1
                fullName: "Miguel de Cervantes"
                bio: "Escritor español, autor de 'Don Quijote'"
                birthDate: "1547-09-29"
                nationality: "Española"
                createdAt: "2024-10-06T10:30:00Z"
                updatedAt: "2024-10-06T10:30:00Z"
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Authors
      summary: Actualizar autor
      operationId: updateAuthor
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequestDTO'
            example:
              fullName: "Miguel de Cervantes Saavedra"
              bio: "Escritor español, autor de 'Don Quijote'. Nació en Alcalá de Henares."
              birthDate: "1547-09-29"
              nationality: "Española"
      responses:
        '200':
          description: Autor actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponseDTO'
              example:
                id: 1
                fullName: "Miguel de Cervantes Saavedra"
                bio: "Escritor español, autor de 'Don Quijote'. Nació en Alcalá de Henares."
                birthDate: "1547-09-29"
                nationality: "Española"
                createdAt: "2024-10-06T10:30:00Z"
                updatedAt: "2024-10-06T10:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Authors
      summary: Eliminar autor (soft delete)
      description: Marca el autor como eliminado sin borrarlo físicamente
      operationId: deleteAuthor
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '204':
          description: Autor marcado como eliminado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ==========================================
  # RATING ENDPOINTS (Puerto 8083)
  # ==========================================
  /ratings:
    get:
      tags:
        - Ratings
      summary: Obtener todas las valoraciones
      description: Lista paginada de valoraciones con filtros opcionales
      operationId: getAllRatings
      parameters:
        - name: bookId
          in: query
          description: Filtrar por ID de libro
          schema:
            type: integer
            format: int32
        - name: userProfileId
          in: query
          description: Filtrar por ID de perfil de usuario
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Lista de valoraciones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
              example:
                data:
                  - id: 1
                    userProfileId: 1
                    bookId: 101
                    valoration: 5
                    comment: "Excelente libro, muy recomendable."
                    createdAt: "2024-10-06T10:30:00Z"
                    updatedAt: "2024-10-06T10:30:00Z"
                  - id: 2
                    userProfileId: 2
                    bookId: 102
                    valoration: 4
                    comment: "Buena lectura, aunque un poco larga."
                    createdAt: "2024-10-05T09:15:00Z"
                    updatedAt: "2024-10-05T09:15:00Z"
                page: 0
                size: 20
                total: 2
                currentPage: 0
                totalPages: 1
                next: false
                prev: false

    post:
      tags:
        - Ratings
      summary: Crear valoración
      description: Permite a un usuario valorar y comentar un libro
      operationId: createRating
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingRequestDTO'
            example:
              userProfileId: 1
              bookId: 101
              valoration: 5
              comment: "Excelente libro, muy recomendable."
      responses:
        '201':
          description: Valoración creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingResponseDTO'
              example:
                id: 3
                userProfileId: 1
                bookId: 101
                valoration: 5
                comment: "Excelente libro, muy recomendable."
                createdAt: "2024-10-06T10:30:00Z"
                updatedAt: "2024-10-06T10:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /ratings/{id}:
    get:
      tags:
        - Ratings
      summary: Obtener valoración por ID
      operationId: getRatingById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '200':
          description: Valoración encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingResponseDTO'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Ratings
      summary: Actualizar valoración
      description: Permite a un usuario modificar su valoración y comentario de un libro
      operationId: updateRating
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingRequestDTO'
            example:
              userProfileId: 1
              bookId: 101
              valoration: 4
              comment: "Buena lectura, aunque un poco larga."
      responses:
        '200':
          description: Valoración actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingResponseDTO'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Ratings
      summary: Eliminar valoración (soft delete)
      description: Marca la valoración como eliminada sin borrarla físicamente
      operationId: deleteRating
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '204':
          description: Valoración marcada como eliminada
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /ratings/book/{bookId}/average:
    get:
      tags:
        - Ratings
      summary: Obtener valoración promedio de un libro
      description: Calcula y retorna el promedio de valoraciones y el total de valoraciones de un libro
      operationId: getBookAverageRating
      parameters:
        - name: bookId
          in: path
          required: true
          description: ID del libro
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '200':
          description: Valoración promedio calculada
          content:
            application/json:
              schema:
                type: object
                properties:
                  bookId:
                    type: integer
                    format: int32
                  averageRating:
                    type: number
                    format: float
                  totalRatings:
                    type: integer
                    format: int32
        '404':
          $ref: '#/components/responses/NotFoundError'

security:
  - bearerAuth: []
