openapi: 3.0.1
info:
  title: Biblioteca Digital API
  version: v1.0
  description: API Documentation for Biblioteca Digital

servers:
  - url: http://localhost:8083
    description: Módulo de Libros

tags:
  - name: Books
    description: Gestión de libros
  - name: Authors
    description: Gestión de autores
  - name: Ratings
    description: Gestión de valoraciones

# security:
  # - bearerAuth: []

paths:
  # ===========================
  # BOOKS
  # ===========================
  /books:
    post:
      tags: [Books]
      summary: Crear libro
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './models/openapi.yaml#/components/schemas/BookRequestDTO'
            example:
              publicationId: 1
              title: "Cien Años de Soledad"
              description: "Novela del escritor colombiano Gabriel García Márquez, publicada en 1967. Es una obra emblemática del realismo mágico y narra la historia de la familia Buendía a lo largo de varias generaciones en el pueblo ficticio de Macondo."
              bookUrl: "http://example.com/cien-anos-de-soledad.pdf"
              coverImg: "http://example.com/cien-anos-de-soledad.jpg"
              authorIds: [1, 2]
      responses:
        '201':
          description: Libro creado
          content:
            application/json:
              schema:
                $ref: './models/openapi.yaml#/components/schemas/BookResponseDTO'

  /books/publication/{publicationId}/author/{authorId}/title/{title}/page/{page}:
    get:
      tags: [Books]
      summary: Obtener libros con manejo de filtros opcionales
      description: Busca libros aplicando filtros opcionales
      operationId: getBooksByFilters
      parameters:
        - name: title
          in: path
          required: true
          description: Título del libro. Use "-" para omitir este filtro
          schema:
            type: string
          example: '-'
        - name: publicationId
          in: path
          required: true
          description: ID de la publicación. Use 0 para omitir este filtro
          schema:
            type: integer
            format: int32
          example: 0
        - name: authorId
          in: path
          required: true
          description: ID del autor. Use 0 para omitir este filtro
          schema:
            type: integer
            format: int32
          example: 0
        - name: page
          in: path
          required: true
          description: Número de página (comienza en 0)
          schema:
            type: integer
            format: int32
          example: 0
      responses:
        '200':
          description: Lista paginada de libros que cumplen los filtros
          content:
            application/json:
              schema:
                $ref: './models/openapi.yaml#/components/schemas/PaginatedBookResponseDTO'

  /books/{id}:
    get:
      tags: [Books]
      summary: Obtener libro por ID
      operationId: getBookById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Libro encontrado
          content:
            application/json:
              schema:
                $ref: './models/openapi.yaml#/components/schemas/BookResponseDTO'
    put:
      tags: [Books]
      summary: Actualizar libro
      operationId: updateBook
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './models/openapi.yaml#/components/schemas/BookRequestDTO'
            example:
              publicationId: 1
              title: "Cien Años de Soledad - Edición Actualizada"
              description: "Novela del escritor colombiano Gabriel García Márquez, publicada en 1967. Es una obra emblemática del realismo mágico y narra la historia de la familia Buendía a lo largo de varias generaciones en el pueblo ficticio de Macondo."
              bookUrl: "http://example.com/cien-anos-de-soledad.pdf"
              coverImg: "http://example.com/cien-anos-de-soledad.jpg"
              authorIds: [1, 2, 3]
      responses:
        '200':
          description: Libro actualizado
          content:
            application/json:
              schema:
                $ref: './models/openapi.yaml#/components/schemas/BookResponseDTO'
    delete:
      tags: [Books]
      summary: Eliminar libro (soft delete)
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Libro marcado como eliminado

  # ===========================
  # AUTHORS
  # ===========================
  /authors:
    post:
      tags: [Authors]
      summary: Crear autor
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './models/openapi.yaml#/components/schemas/AuthorRequestDTO'
            example:
              fullName: "Miguel de Cervantes Saavedra"
              bio: "Escritor español, autor de 'Don Quijote'. Nació en Alcalá de Henares."
              birthDate: "1450-10-04"
              nationality: "Española"
      responses:
        '201':
          description: Autor creado
          content:
            application/json:
              schema:
                $ref: './models/openapi.yaml#/components/schemas/AuthorResponseDTO'

  /authors/book/{bookId}/fullname/{fullname}/birthdate/{min}/{max}/nationality/{nationality}/page/{page}:
    get:
      tags: [Authors]
      summary: Obtener autores con manejo de filtros opcionales
      description: Busca autores aplicando filtros opcionales
      operationId: getAuthorsByFilters
      parameters:
        - name: bookId
          in: path
          required: true
          description: ID del libro. Use 0 para omitir este filtro
          schema:
            type: integer
            format: int32
          example: '0'
        - name: fullname
          in: path
          required: true
          description: Nombre completo del autor (búsqueda parcial). Use "-" para omitir este filtro
          schema:
            type: string
          example: '-'
        - name: min
          in: path
          required: true
          description: Fecha mínima de nacimiento en formato AAAA-MM-DD. Use "0000-01-01" para omitir este filtro
          schema:
            type: string
            format: date
          example: '0000-01-01'
        - name: max
          in: path
          required: true
          description: Fecha máxima de nacimiento en formato AAAA-MM-DD. Use "0000-01-01" para omitir este filtro
          schema:
            type: string
            format: date
          example: '0000-01-01'
        - name: nationality
          in: path
          required: true
          description: Nacionalidad del autor (búsqueda parcial). Use "-" para omitir este filtro
          schema:
            type: string
          example: '-'
        - name: page
          in: path
          required: true
          description: Número de página (comienza en 0)
          schema:
            type: integer
            format: int32
          example: '0'
      responses:
        '200':
          description: Lista paginada de autores que cumplen los filtros
          content:
            application/json:
              schema:
                $ref: './models/openapi.yaml#/components/schemas/PaginatedAuthorResponseDTO'

  /authors/{id}:
    get:
      tags: [Authors]
      summary: Obtener autor por ID
      operationId: getAuthorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Autor encontrado
          content:
            application/json:
              schema:
                $ref: './models/openapi.yaml#/components/schemas/AuthorResponseDTO'
    put:
      tags: [Authors]
      summary: Actualizar autor
      operationId: updateAuthor
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './models/openapi.yaml#/components/schemas/AuthorRequestDTO'
            example:
              fullName: "Miguel de Cervantes Saavedra"
              bio: "Escritor español, autor de 'Don Quijote'. Nació en Alcalá de Henares."
              birthDate: "1547-09-29"
              nationality: "Española"
      responses:
        '200':
          description: Autor actualizado
          content:
            application/json:
              schema:
                $ref: './models/openapi.yaml#/components/schemas/AuthorResponseDTO'
    delete:
      tags: [Authors]
      summary: Eliminar autor (soft delete)
      operationId: deleteAuthor
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Autor marcado como eliminado

  # ===========================
  # RATINGS
  # ===========================
  /ratings:
    post:
      tags: [Ratings]
      summary: Crear valoración
      operationId: createRating
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './models/openapi.yaml#/components/schemas/RatingRequestDTO'
      responses:
        '201':
          description: Valoración creada
          content:
            application/json:
              schema:
                $ref: './models/openapi.yaml#/components/schemas/RatingResponseDTO'
              example:
                userProfileId: 10
                bookId: 1
                valoration: 5
                comment: "Excelente libro, muy recomendable para todos los amantes de la literatura."

  /ratings/book/{bookId}/userprofile/{userProfileId}/valoration/{min}/{max}/page/{page}:
    get:
      tags: [Ratings]
      summary: Obtener valoraciones con manejo de filtros opcionales
      description: Busca valoraciones aplicando filtros opcionales
      operationId: getRatingsByFilters
      parameters:
        - name: bookId
          in: path
          required: true
          description: ID del libro. Use 0 para omitir este filtro
          schema:
            type: integer
            format: int32
          example: 0
        - name: userProfileId
          in: path
          required: true
          description: ID del perfil de usuario. Use 0 para omitir este filtro
          schema:
            type: integer
            format: int32
          example: 0
        - name: min
          in: path
          required: true
          description: Valoración mínima (1-5). Use 0 para omitir este filtro
          schema:
            type: integer
            format: int32
          example: 0
        - name: max
          in: path
          required: true
          description: Valoración máxima (1-5). Use 0 para omitir este filtro
          schema:
            type: integer
            format: int32
          example: 0
        - name: page
          in: path
          required: true
          description: Número de página (comienza en 0)
          schema:
            type: integer
            format: int32
          example: 0
      responses:
        '200':
          description: Lista paginada de valoraciones que cumplen los filtros
          content:
            application/json:
              schema:
                $ref: './models/openapi.yaml#/components/schemas/PaginatedRatingResponseDTO'

  /ratings/{id}:
    get:
      tags: [Ratings]
      summary: Obtener valoración por ID
      operationId: getRatingById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Valoración encontrada
          content:
            application/json:
              schema:
                $ref: './models/openapi.yaml#/components/schemas/RatingResponseDTO'
    put:
      tags: [Ratings]
      summary: Actualizar valoración
      operationId: updateRating
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './models/openapi.yaml#/components/schemas/RatingRequestDTO'
            example:
              userProfileId: 10
              bookId: 1
              valoration: 4
              comment: "Muy buen libro, aunque tiene algunas partes lentas. En general lo recomiendo."
      responses:
        '200':
          description: Valoración actualizada
          content:
            application/json:
              schema:
                $ref: './models/openapi.yaml#/components/schemas/RatingResponseDTO'
    delete:
      tags: [Ratings]
      summary: Eliminar valoración (soft delete)
      operationId: deleteRating
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Valoración marcada como eliminada
