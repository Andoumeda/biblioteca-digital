openapi: 3.0.1
info:
  title: Biblioteca Digital API
  version: v1.0
  description: API Documentation for Biblioteca Digital - Módulo de Publicaciones

servers:
  - url: http://localhost:8082
    description: Módulo de Publicaciones

tags:
  - name: Publications
    description: Gestión de publicaciones
  - name: Categories
    description: Gestión de categorías
  - name: Favorites
    description: Gestión de favoritos

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    BaseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Identificador único del registro
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación del registro
        updatedAt:
          type: string
          format: date-time
          description: Fecha de última actualización del registro
        isDeleted:
          type: boolean
          description: Indica si el registro fue eliminado lógicamente (borrado lógico)

    RoleDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          description: Nombre del rol (e.g., ADMIN, USER)
        description:
          type: string

    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        username:
          type: string
          description: Nombre de usuario único
        email:
          type: string
          format: email
          description: Correo electrónico del usuario
        role:
          $ref: '#/components/schemas/RoleDTO'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserRegistrationRequestDTO:
      type: object
      required:
        - username
        - email
        - password
        - roleId
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 100
        password:
          type: string
          format: password
          minLength: 8
        roleId:
          type: integer
          format: int32

    UserLoginRequestDTO:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          maxLength: 100
        password:
          type: string
          format: password

    AuthResponseDTO:
      type: object
      properties:
        token:
          type: string
          description: JWT token
        user:
          $ref: '#/components/schemas/UserDTO'

    UserProfileRequestDTO:
      type: object
      required:
        - userId
        - displayName
      properties:
        userId:
          type: integer
          format: int32
          description: ID del usuario asociado al perfil
        displayName:
          type: string
          maxLength: 100
          description: Nombre visible del usuario en la plataforma
        bio:
          type: string
          description: Biografía o información adicional del usuario
        profilePicture:
          type: string
          maxLength: 255
          description: URL de la foto de perfil del usuario

    UserProfileResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - $ref: '#/components/schemas/UserProfileRequestDTO'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/UserDTO'

    AnnouncementRequestDTO:
      type: object
      required:
        - title
        - type
        - targetAudience
      properties:
        title:
          type: string
          maxLength: 255
          description: Título del anuncio
        message:
          type: string
          description: Mensaje o cuerpo del anuncio
        type:
          type: string
          enum:
            - alert
            - info
            - warning
            - promo
          description: Tipo de anuncio
        targetAudience:
          type: string
          enum:
            - all
            - new_users
            - admins
          description: Audiencia objetivo del anuncio

    AnnouncementResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - $ref: '#/components/schemas/AnnouncementRequestDTO'
        - type: object

    FavoriteRequestDTO:
      type: object
      required:
        - userProfileId
        - publicationId
      properties:
        userProfileId:
          type: integer
          format: int32
          description: ID del perfil de usuario
        publicationId:
          type: integer
          format: int32
          description: ID de la publicación favorita

    FavoriteResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - type: object
          properties:
            userProfile:
              $ref: '#/components/schemas/UserProfileResponseDTO'
            publication:
              $ref: '#/components/schemas/PublicationResponseDTO'

    PublicationRequestDTO:
      type: object
      required:
        - userProfileId
        - title
        - state
      properties:
        userProfileId:
          type: integer
          format: int32
          description: ID del perfil de usuario que crea la publicación
        title:
          type: string
          description: Título de la publicación
        description:
          type: string
          description: Descripción de la publicación
        state:
          type: string
          enum:
            - pending
            - approved
            - rejected
          description: Estado de la publicación
        categoryIds:
          type: array
          items:
            type: integer
            format: int32
          description: IDs de las categorías asociadas

    PublicationResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - $ref: '#/components/schemas/PublicationRequestDTO'
        - type: object
          properties:
            userProfile:
              $ref: '#/components/schemas/UserProfileResponseDTO'
            categories:
              type: array
              items:
                $ref: '#/components/schemas/CategoryResponseDTO'
            books:
              type: array
              items:
                $ref: '#/components/schemas/BookResponseDTO'

    CategoryRequestDTO:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
          description: Nombre de la categoría

    CategoryResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - $ref: '#/components/schemas/CategoryRequestDTO'
        - type: object

    BookRequestDTO:
      type: object
      required:
        - publicationId
        - title
        - bookUrl
        - numPages
        - fileSize
        - authorIds
      properties:
        publicationId:
          type: integer
          format: int32
          description: ID de la publicación asociada
        title:
          type: string
          maxLength: 255
          description: Título del libro
        description:
          type: string
          description: Descripción del libro
        bookUrl:
          type: string
          maxLength: 255
          description: URL del archivo del libro
        coverImg:
          type: string
          maxLength: 255
          description: URL de la imagen de portada
        numPages:
          type: integer
          format: int32
          minimum: 1
          description: Número de páginas del libro
        fileSize:
          type: integer
          format: int32
          minimum: 1
          description: Tamaño del archivo en bytes
        authorIds:
          type: array
          items:
            type: integer
            format: int32
          description: IDs de los autores del libro

    BookResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - $ref: '#/components/schemas/BookRequestDTO'
        - type: object
          properties:
            authors:
              type: array
              items:
                $ref: '#/components/schemas/AuthorResponseDTO'
            ratingAverage:
              type: number
              format: float
              description: Puntuación promedio del libro
            ratingsCount:
              type: integer
              format: int32
              description: Número total de valoraciones del libro

    AuthorRequestDTO:
      type: object
      required:
        - fullName
        - bio
      properties:
        fullName:
          type: string
          maxLength: 150
          description: Nombre completo del autor
        bio:
          type: string
          description: Biografía del autor
        birthDate:
          type: string
          format: date
          description: Fecha de nacimiento del autor
        nationality:
          type: string
          maxLength: 100
          description: Nacionalidad del autor

    AuthorResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - $ref: '#/components/schemas/AuthorRequestDTO'
        - type: object

    RatingRequestDTO:
      type: object
      required:
        - userProfileId
        - bookId
        - valoration
      properties:
        userProfileId:
          type: integer
          format: int32
          description: ID del perfil de usuario que realiza la valoración
        bookId:
          type: integer
          format: int32
          description: ID del libro que se está valorando
        valoration:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
          description: Puntuación otorgada (1-5)
        comment:
          type: string
          description: Comentario adicional sobre el libro

    RatingResponseDTO:
      allOf:
        - $ref: '#/components/schemas/BaseDTO'
        - $ref: '#/components/schemas/RatingRequestDTO'
        - type: object
          properties:
            userProfile:
              $ref: '#/components/schemas/UserProfileResponseDTO'
            book:
              $ref: '#/components/schemas/BookResponseDTO'

    PaginatedResponseDTO:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
        next:
          type: boolean
        prev:
          type: boolean

    ErrorResponseDTO:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        path:
          type: string

  responses:
    UnauthorizedError:
      description: No autorizado - Token inválido o no proporcionado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'

    ForbiddenError:
      description: Prohibido - No tiene permisos para realizar esta acción
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'

    NotFoundError:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'

    BadRequestError:
      description: Petición inválida
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'

paths:
  # ==========================================
  # PUBLICATION ENDPOINTS (Puerto 8082)
  # ==========================================
  /publications:
    post:
      tags:
        - Publications
      summary: Crear publicación
      description: Crea una nueva publicación asociada a un perfil de usuario
      operationId: createPublication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicationRequestDTO'
            example:
              userProfileId: 1
              title: "Nueva publicación sobre libros"
              description: "Descripción detallada de la publicación sobre libros."
              categoryIds: [ 1, 3 ]
      responses:
        '201':
          description: Publicación creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationResponseDTO'
              example:
                id: 3
                userProfileId: 1
                title: "Nueva publicación sobre libros"
                description: "Descripción detallada de la publicación sobre libros."
                state: "pending"
                categoryIds: [ 1, 3 ]
                createdAt: "2025-10-06T10:30:00"
                updatedAt: "2025-10-06T10:30:00"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /publications/page/{page}/size/{size}:
    get:
      tags:
        - Publications
      summary: Obtener todas las publicaciones (paginado)
      description: Lista paginada de publicaciones. Los parámetros page y size son opcionales en la URL
      operationId: getAllPublications
      parameters:
        - name: page
          in: path
          required: true
          schema:
            type: integer
            default: 0
            minimum: 0
          example: 0
          description: Número de página (opcional, por defecto 0)
        - name: size
          in: path
          required: true
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          example: 20
          description: Tamaño de página (opcional, por defecto 20)
      responses:
        '200':
          description: Lista de publicaciones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
              example:
                data:
                  - id: 1
                    title: "Publicación 1"
                    description: "Descripción de la publicación 1"
                    state: "approved"
                    userProfileId: 1
                    categoryIds: [1, 2]
                    createdAt: "2025-10-06T10:30:00"
                    updatedAt: "2025-10-06T10:30:00"
                  - id: 2
                    title: "Publicación 2"
                    description: "Descripción de la publicación 2"
                    state: "pending"
                    userProfileId: 2
                    categoryIds: [2, 3]
                    createdAt: "2025-10-05T09:15:00"
                    updatedAt: "2025-10-05T09:15:00"
                pageSize: 20
                totalItems: 2
                currentPage: 0
                totalPages: 1
                prev: false
                next: false

  /publications/title/{title}/page/{page}/size/{size}:
    get:
      tags:
        - Publications
      summary: Obtener publicaciones por título (paginado)
      description: Lista paginada de publicaciones filtradas por título. Los parámetros page y size son opcionales en la URL
      operationId: getPublicationsByTitle
      parameters:
        - name: title
          in: path
          required: true
          description: Título de la publicación a buscar
          schema:
            type: string
          example: "libros"
        - name: page
          in: path
          required: true
          schema:
            type: integer
            default: 0
            minimum: 0
          example: 0
          description: Número de página (opcional, por defecto 0)
        - name: size
          in: path
          required: true
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          example: 20
          description: Tamaño de página (opcional, por defecto 20)
      responses:
        '200':
          description: Lista de publicaciones filtradas por título
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
              example:
                data:
                  - id: 1
                    title: "Publicación sobre libros clásicos"
                    description: "Descripción de la publicación 1"
                    state: "approved"
                    userProfileId: 1
                    categoryIds: [1]
                    createdAt: "2025-10-06T10:30:00"
                    updatedAt: "2025-10-06T10:30:00"
                pageSize: 20
                totalItems: 1
                currentPage: 0
                totalPages: 1
                prev: false
                next: false

  /publications/description/{desc}/page/{page}/size/{size}:
    get:
      tags:
        - Publications
      summary: Obtener publicaciones por descripción (paginado)
      description: Lista paginada de publicaciones filtradas por descripción. Los parámetros page y size son opcionales en la URL
      operationId: getPublicationsByDescription
      parameters:
        - name: desc
          in: path
          required: true
          description: Descripción de la publicación a buscar
          schema:
            type: string
          example: "ciencia ficción"
        - name: page
          in: path
          required: true
          schema:
            type: integer
            default: 0
            minimum: 0
          example: 0
          description: Número de página (opcional, por defecto 0)
        - name: size
          in: path
          required: true
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          example: 20
          description: Tamaño de página (opcional, por defecto 20)
      responses:
        '200':
          description: Lista de publicaciones filtradas por descripción
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
              example:
                data:
                  - id: 2
                    title: "Publicación sobre el futuro"
                    description: "Una exploración de ciencia ficción"
                    state: "approved"
                    userProfileId: 2
                    categoryIds: [3]
                    createdAt: "2025-10-05T09:15:00"
                    updatedAt: "2025-10-05T09:15:00"
                pageSize: 20
                totalItems: 1
                currentPage: 0
                totalPages: 1
                prev: false
                next: false

  /publications/state/{state}/page/{page}/size/{size}:
    get:
      tags:
        - Publications
      summary: Obtener publicaciones por estado (paginado)
      description: Lista paginada de publicaciones filtradas por estado. Los parámetros page y size son opcionales en la URL
      operationId: getPublicationsByState
      parameters:
        - name: state
          in: path
          required: true
          description: Estado de la publicación
          schema:
            type: string
            enum: [pending, approved, rejected]
          example: approved
        - name: page
          in: path
          required: true
          schema:
            type: integer
            default: 0
            minimum: 0
          example: 0
          description: Número de página (opcional, por defecto 0)
        - name: size
          in: path
          required: true
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          example: 20
          description: Tamaño de página (opcional, por defecto 20)
      responses:
        '200':
          description: Lista de publicaciones filtradas por estado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
              example:
                data:
                  - id: 1
                    title: "Publicación aprobada 1"
                    description: "Descripción de la publicación aprobada"
                    state: "approved"
                    userProfileId: 1
                    categoryIds: [1, 2]
                    createdAt: "2025-10-06T10:30:00"
                    updatedAt: "2025-10-06T10:30:00"
                  - id: 3
                    title: "Publicación aprobada 2"
                    description: "Otra publicación aprobada"
                    state: "approved"
                    userProfileId: 3
                    categoryIds: [2]
                    createdAt: "2025-10-04T14:20:00"
                    updatedAt: "2025-10-04T14:20:00"
                pageSize: 20
                totalItems: 2
                currentPage: 0
                totalPages: 1
                prev: false
                next: false

  /publications/user/{user}/page/{page}/size/{size}:
    get:
      tags:
        - Publications
      summary: Obtener publicaciones por usuario (paginado)
      description: Lista paginada de publicaciones filtradas por usuario. Los parámetros page y size son opcionales en la URL
      operationId: getPublicationsByUser
      parameters:
        - name: user
          in: path
          required: true
          description: ID del perfil de usuario
          schema:
            type: integer
            format: int32
          example: 1
        - name: page
          in: path
          required: true
          schema:
            type: integer
            default: 0
            minimum: 0
          example: 0
          description: Número de página (opcional, por defecto 0)
        - name: size
          in: path
          required: true
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          example: 20
          description: Tamaño de página (opcional, por defecto 20)
      responses:
        '200':
          description: Lista de publicaciones filtradas por usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
              example:
                data:
                  - id: 1
                    title: "Publicación del usuario 1"
                    description: "Descripción de la publicación"
                    state: "approved"
                    userProfileId: 1
                    categoryIds: [1, 2]
                    createdAt: "2025-10-06T10:30:00"
                    updatedAt: "2025-10-06T10:30:00"
                pageSize: 20
                totalItems: 1
                currentPage: 0
                totalPages: 1
                prev: false
                next: false

  /publications/category/{cat}/page/{page}/size/{size}:
    get:
      tags:
        - Publications
      summary: Obtener publicaciones por categoría (paginado)
      description: Lista paginada de publicaciones filtradas por categoría. Los parámetros page y size son opcionales en la URL
      operationId: getPublicationsByCategory
      parameters:
        - name: cat
          in: path
          required: true
          description: ID de la categoría
          schema:
            type: integer
            format: int32
          example: 1
        - name: page
          in: path
          required: true
          schema:
            type: integer
            default: 0
            minimum: 0
          example: 0
          description: Número de página (opcional, por defecto 0)
        - name: size
          in: path
          required: true
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          example: 20
          description: Tamaño de página (opcional, por defecto 20)
      responses:
        '200':
          description: Lista de publicaciones filtradas por categoría
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
              example:
                data:
                  - id: 1
                    title: "Publicación de la categoría"
                    description: "Descripción de la publicación"
                    state: "approved"
                    userProfileId: 1
                    categoryIds: [1]
                    createdAt: "2025-10-06T10:30:00"
                    updatedAt: "2025-10-06T10:30:00"
                pageSize: 20
                totalItems: 1
                currentPage: 0
                totalPages: 1
                prev: false
                next: false

  /publications/{id}:
    get:
      tags:
        - Publications
      summary: Obtener publicación por ID
      operationId: getPublicationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '200':
          description: Publicación encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationResponseDTO'
              example:
                id: 1
                userProfileId: 1
                title: "Publicación 1"
                description: "Descripción de la publicación 1"
                state: "approved"
                categoryIds: [1, 2]
                createdAt: "2025-10-06T10:30:00"
                updatedAt: "2025-10-06T10:30:00"
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Publications
      summary: Actualizar publicación
      operationId: updatePublication
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicationRequestDTO'
            example:
              userProfileId: 1
              title: "Publicación actualizada"
              description: "Descripción actualizada de la publicación."
              categoryIds: [1, 2, 3]
      responses:
        '200':
          description: Publicación actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationResponseDTO'
              example:
                id: 1
                userProfileId: 1
                title: "Publicación actualizada"
                description: "Descripción actualizada de la publicación."
                state: "pending"
                categoryIds: [1, 2, 3]
                createdAt: "2025-10-06T10:30:00"
                updatedAt: "2025-10-06T10:30:00"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Publications
      summary: Eliminar publicación (borrado lógico)
      description: Marca la publicación como eliminada sin borrarla físicamente
      operationId: deletePublication
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '204':
          description: Publicación marcada como eliminada
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /publications/{id}/approve:
    patch:
      tags:
        - Publications
      summary: Aprobar publicación
      description: Cambia el estado de una publicación a 'approved' (solo administradores)
      operationId: approvePublication
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 2
      responses:
        '200':
          description: Publicación aprobada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationResponseDTO'
              example:
                id: 2
                userProfileId: 1
                title: "Publicación aprobada"
                description: "Esta publicación fue aprobada por el administrador"
                state: "approved"
                categoryIds: [1, 2]
                createdAt: "2025-10-06T10:30:00"
                updatedAt: "2025-10-11T15:45:00"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /publications/{id}/reject:
    patch:
      tags:
        - Publications
      summary: Rechazar publicación
      description: Cambia el estado de una publicación a 'rejected' (solo administradores)
      operationId: rejectPublication
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 3
      responses:
        '200':
          description: Publicación rechazada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationResponseDTO'
              example:
                id: 3
                userProfileId: 2
                title: "Publicación rechazada"
                description: "Esta publicación fue rechazada por el administrador"
                state: "rejected"
                categoryIds: [1]
                createdAt: "2025-10-05T09:15:00"
                updatedAt: "2025-10-11T15:45:00"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ==========================================
  # CATEGORY ENDPOINTS (Puerto 8082)
  # ==========================================
  /categories:
    post:
      tags:
        - Categories
      summary: Crear categoría
      description: Crea una nueva categoría (requiere permisos de administrador)
      operationId: createCategory
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequestDTO'
            example:
              name: "Ciencia Ficción"
      responses:
        '201':
          description: Categoría creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseDTO'
              example:
                id: 3
                name: "Ciencia Ficción"
                isDeleted: false
                createdAt: "2025-10-06T10:30:00"
                updatedAt: "2025-10-06T10:30:00"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    get:
      tags:
        - Categories
      summary: Obtener todas las categorías
      description: Lista completa de categorías disponibles (sin paginación)
      operationId: getAllCategories
      responses:
        '200':
          description: Lista de categorías
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponseDTO'
              example:
                - id: 1
                  name: "Ficción"
                  isDeleted: false
                  createdAt: "2025-10-06T10:30:00"
                  updatedAt: "2025-10-06T10:30:00"
                - id: 2
                  name: "No Ficción"
                  isDeleted: false
                  createdAt: "2025-10-05T09:15:00"
                  updatedAt: "2025-10-05T09:15:00"
                - id: 3
                  name: "Ciencia Ficción"
                  isDeleted: false
                  createdAt: "2025-10-04T14:20:00"
                  updatedAt: "2025-10-04T14:20:00"

  /categories/name/{name}:
    get:
      tags:
        - Categories
      summary: Obtener categorías por nombre
      description: Busca categorías por nombre (puede retornar múltiples resultados)
      operationId: getCategoriesByName
      parameters:
        - name: name
          in: path
          required: true
          description: Nombre de la categoría a buscar
          schema:
            type: string
          example: "Ficción"
      responses:
        '200':
          description: Categorías encontradas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponseDTO'
              example:
                - id: 1
                  name: "Ficción"
                  isDeleted: false
                  createdAt: "2025-10-06T10:30:00"
                  updatedAt: "2025-10-06T10:30:00"
        '404':
          $ref: '#/components/responses/NotFoundError'

  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Obtener categoría por ID
      operationId: getCategoryById
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la categoría
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '200':
          description: Categoría encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseDTO'
              example:
                id: 1
                name: "Ficción"
                isDeleted: false
                createdAt: "2025-10-06T10:30:00"
                updatedAt: "2025-10-06T10:30:00"
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Categories
      summary: Actualizar categoría
      description: Actualiza una categoría existente por ID
      operationId: updateCategory
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la categoría a actualizar
          schema:
            type: integer
            format: int32
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequestDTO'
            example:
              name: "Ficción Científica"
      responses:
        '200':
          description: Categoría actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseDTO'
              example:
                id: 1
                name: "Ficción Científica"
                isDeleted: false
                createdAt: "2025-10-06T10:30:00"
                updatedAt: "2025-10-10T15:45:00"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Categories
      summary: Eliminar categoría (borrado lógico)
      description: Marca la categoría como eliminada sin borrarla físicamente
      operationId: deleteCategory
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la categoría a eliminar
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '204':
          description: Categoría marcada como eliminada
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ==========================================
  # FAVORITE ENDPOINTS (Puerto 8082)
  # ==========================================
  /favorites:
    post:
      tags:
        - Favorites
      summary: Agregar a favoritos
      description: Marca una publicación como favorita para un usuario
      operationId: addFavorite
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteRequestDTO'
            example:
              userProfileId: 1
              publicationId: 101
      responses:
        '201':
          description: Favorito agregado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteResponseDTO'
              example:
                id: 1
                userProfileId: 1
                publicationId: 101
                createdAt: "2025-10-06T10:30:00"
                updatedAt: "2025-10-06T10:30:00"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /favorites/page/{page}/size/{size}:
    get:
      tags:
        - Favorites
      summary: Obtener todos los favoritos (paginado)
      description: Lista paginada de todos los favoritos. Los parámetros page y size son opcionales en la URL
      operationId: getAllFavorites
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: path
          required: true
          schema:
            type: integer
            default: 0
            minimum: 0
          example: 0
          description: Número de página (opcional, por defecto 0)
        - name: size
          in: path
          required: true
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          example: 20
          description: Tamaño de página (opcional, por defecto 20)
      responses:
        '200':
          description: Lista de favoritos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
              example:
                data:
                  - id: 1
                    userProfileId: 1
                    publicationId: 101
                    createdAt: "2025-10-06T10:30:00"
                    updatedAt: "2025-10-06T10:30:00"
                  - id: 2
                    userProfileId: 1
                    publicationId: 102
                    createdAt: "2025-10-05T09:15:00"
                    updatedAt: "2025-10-05T09:15:00"
                pageSize: 20
                totalItems: 2
                currentPage: 0
                totalPages: 1
                prev: false
                next: false
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /favorites/user/{user}/page/{page}/size/{size}:
    get:
      tags:
        - Favorites
      summary: Obtener favoritos de un usuario (paginado)
      description: Lista paginada de todas las publicaciones favoritas de un usuario específico. Los parámetros page y size son opcionales en la URL
      operationId: getFavoritesByUser
      security:
        - bearerAuth: []
      parameters:
        - name: user
          in: path
          required: true
          description: ID del perfil de usuario
          schema:
            type: integer
            format: int32
          example: 1
        - name: page
          in: path
          required: true
          schema:
            type: integer
            default: 0
            minimum: 0
          example: 0
          description: Número de página (opcional, por defecto 0)
        - name: size
          in: path
          required: true
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          example: 20
          description: Tamaño de página (opcional, por defecto 20)
      responses:
        '200':
          description: Favoritos del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
              example:
                data:
                  - id: 1
                    userProfileId: 1
                    publicationId: 101
                    createdAt: "2025-10-06T10:30:00"
                    updatedAt: "2025-10-06T10:30:00"
                  - id: 2
                    userProfileId: 1
                    publicationId: 105
                    createdAt: "2025-10-05T09:15:00"
                    updatedAt: "2025-10-05T09:15:00"
                pageSize: 20
                totalItems: 2
                currentPage: 0
                totalPages: 1
                prev: false
                next: false
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /favorites/publication/{pub}/page/{page}/size/{size}:
    get:
      tags:
        - Favorites
      summary: Obtener favoritos de una publicación (paginado)
      description: Lista paginada de todos los usuarios que marcaron una publicación como favorita. Los parámetros page y size son opcionales en la URL
      operationId: getFavoritesByPublication
      security:
        - bearerAuth: []
      parameters:
        - name: pub
          in: path
          required: true
          description: ID de la publicación
          schema:
            type: integer
            format: int32
          example: 101
        - name: page
          in: path
          required: true
          schema:
            type: integer
            default: 0
            minimum: 0
          example: 0
          description: Número de página (opcional, por defecto 0)
        - name: size
          in: path
          required: true
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          example: 20
          description: Tamaño de página (opcional, por defecto 20)
      responses:
        '200':
          description: Favoritos de la publicación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
              example:
                data:
                  - id: 1
                    userProfileId: 1
                    publicationId: 101
                    createdAt: "2025-10-06T10:30:00"
                    updatedAt: "2025-10-06T10:30:00"
                  - id: 5
                    userProfileId: 3
                    publicationId: 101
                    createdAt: "2025-10-04T11:20:00"
                    updatedAt: "2025-10-04T11:20:00"
                pageSize: 20
                totalItems: 2
                currentPage: 0
                totalPages: 1
                prev: false
                next: false
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /favorites/{id}:
    get:
      tags:
        - Favorites
      summary: Obtener favorito por ID
      operationId: getFavoriteById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '200':
          description: Favorito encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteResponseDTO'
              example:
                id: 1
                userProfileId: 1
                publicationId: 101
                createdAt: "2025-10-06T10:30:00"
                updatedAt: "2025-10-06T10:30:00"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Favorites
      summary: Eliminar de favoritos (borrado lógico)
      description: Marca el favorito como eliminado sin borrarlo físicamente
      operationId: removeFavorite
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '204':
          description: Favorito eliminado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

security:
  - bearerAuth: []
